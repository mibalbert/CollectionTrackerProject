
<!doctype html>

<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<title>Parcel Details</title>
		<meta name="description" content="Individual parcel details">
		<meta name="author" content="Alberto Paros">
		<meta name="viewport" content= "width=device-width, initial-scale=1.0">
		<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
		<link href="/style.css" type="text/css" rel="stylesheet" />
		<script type="module/javascript" src="indiv-parcel-map.js" defer></script>


	</head>
	<body>
		<header>
			<h1>Parcelino<span id="punct">.</span></h1>
			<nav>
				<ul>
				{{#if role.customer}}
					<li><a href="/send">Send ðŸ“¦</a></li>
					<li><a href="/home-customer">Sended</a></li>	
				{{/if}}
				{{#if role.courier}}
					<li><a href="/home-courier-p">Packages</a></li>
					<li><a href="/home-courier-transit">Transit</a></li>
				{{/if}}
				{{#if role.admin}}
					<li><a href="/home-admin-c">Couriers List</a></li>
					<li><a href="/home-admin-p">Parcels List</a></li>	
				{{/if}}
					<li><a href="/logout">Log out</a></li>
				</ul>
			</nav>
		</header>
	<main>
		<h2>Parcel Details</h2>
		<p>Logged in as <span id="authorised">{{authorised}}</span></p>
		<div id="wrapper">
			<div id="left"><strong>Destination</strong></div>
			<div id="right">
				{{#each parcels}}
					<span><strong>{{this.status}}</strong></span>
				{{/each}}
			</div>
		</div>
		{{!-- Where the map will be displayed --}}
		<div id="map"></div>
		<p>Parcel details</p>
		<table>
			<thead>
				<tr>
					<th></th>
					<th>Sender Username</th>
					<th>Sender PostCode</th>
					<th>Recipient PostCode</th>
					<th>Weight</th>
					<th>Recipient Name</th>
					<th>Full Adress</th>
					<th>Date Posted</th>
					<th>Date Transit</th>
					<th>Date Delivered</th>
					<th>Unique ID</th>
					<th>Status</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				
			{{#each parcels}}
				<tr>
					<td><span class="emoji">ðŸ“¦</span></td>
					<td id="sender_username">{{this.sender_username}}</td>
					<td id="sender_postcode">{{this.sender_postcode}}</td>
					<td id="recipient_postcode">{{this.recipient_postcode}}</td>
					<td id="weight_kg">{{this.weight_kg}}</td>
					<td id="recipient_name">{{this.recipient_name}}</td>
					<td id="full_address">{{this.full_address}}</td>
					<td id="date_time_created">{{{lop this.date_time_created}}}</td>
					<td id="date_time_in_transit">{{{lop this.date_time_in_transit}}}</td>
					<td id="date_time_delivered">{{{lop this.date_time_delivered}}}</td>
					<td id="uuid">{{this.uuid}}</td>
					<td id="status">{{this.status}}</td>
					<td class="button">
						<td>
							<form  id="formis" action="/home-courier-p/{{this.uuid}}" method="post" enctype="multipart/form-data">
								<input type="submit" name="submit" value="Add-Transit">
							</form>
						</td>
						</td>
						<td id="accept"><button onclick="window.location='/home-courier-receiver-details/{{this.uuid}}'" >Deliver</button>	
					</td>
				</tr>
			{{/each}}
			</tbody>
			
		</table>
	</main>
	<footer>
		<p>This is the footer</p>
	</footer>
		{{!-- Really don't know why it doesn't work if it's not inside the html... --}}
		<script>

		const status = document.getElementById('status')
		const authorised = document.getElementById('authorised')
		const courier = document.getElementById('courier')
		//console.log(courier)
		if(courier != null){
			if (status.innerHTML == 'not-dispatched'){
			document.getElementById('accept').style.display = 'none'	
			} else if(status.innerHTML == 'in-transit'){
				document.getElementById('formis').style.display = 'none'
			} else {
				document.getElementById('formis').style.display = 'none'
				document.getElementById('accept').style.display = 'none'
			}
		} else {
			document.getElementById('formis').style.display = 'none'
			document.getElementById('accept').style.display = 'none'
		}

		let lat = document.getElementById('sender_postcode')	
		let lng = document.getElementById('recipient_postcode')
		lat = lat.innerHTML
		lng = lng.innerHTML
		let map;
		function initMap(){
			//initiate the directions stuff
			const directionsRenderer = new google.maps.DirectionsRenderer()
			const directionsService = new google.maps.DirectionsService()
			//create the map
			map = new google.maps.Map(document.getElementById('map'))
			directionsRenderer.setMap(map)
			calculateAndDisplayRoute(directionsService, directionsRenderer)
		}
		function calculateAndDisplayRoute(directionsService, directionsRenderer) {
			directionsService.route(
				{
					origin: lat ,
					destination: lng ,
					travelMode: "DRIVING"
				},
				(response, status) => {
					directionsRenderer.setDirections(response);
					console.log(status);
				}
			)
		}
		window.initMap = initMap;
		</script>
	  {{!-- Has to be loaded last --}}
	  <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMN0tTYpnYsYcy62DPJoLB_bqZqHnNVDU&callback=initMap&v=weekly"
      defer
	  ></script>
	</body>	
</html>
{{!-- 
// This example requires the Geometry library. Include the libraries=geometry
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=geometry">
let marker1, marker2;
let poly, geodesicPoly;

function initMap() {
  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 4,
    center: { lat: 34, lng: -40.605 },
  });

  map.controls[google.maps.ControlPosition.TOP_CENTER].push(
    document.getElementById("info")
  );
  marker1 = new google.maps.Marker({
    map,
    draggable: true,
    position: { lat: 40.714, lng: -74.006 },
  });
  marker2 = new google.maps.Marker({
    map,
    draggable: true,
    position: { lat: 48.857, lng: 2.352 },
  });

  const bounds = new google.maps.LatLngBounds(
    marker1.getPosition(),
    marker2.getPosition()
  );

  map.fitBounds(bounds);
  google.maps.event.addListener(marker1, "position_changed", update);
  google.maps.event.addListener(marker2, "position_changed", update);
  poly = new google.maps.Polyline({
    strokeColor: "#FF0000",
    strokeOpacity: 1.0,
    strokeWeight: 3,
    map: map,
  });
  geodesicPoly = new google.maps.Polyline({
    strokeColor: "#CC0099",
    strokeOpacity: 1.0,
    strokeWeight: 3,
    geodesic: true,
    map: map,
  });
  update();
}

function update() {
  const path = [marker1.getPosition(), marker2.getPosition()];

  poly.setPath(path);
  geodesicPoly.setPath(path);

  const heading = google.maps.geometry.spherical.computeHeading(
    path[0],
    path[1]
  );

  document.getElementById("heading").value = String(heading);
  document.getElementById("origin").value = String(path[0]);
  document.getElementById("destination").value = String(path[1]);
}

window.initMap = initMap; --}}